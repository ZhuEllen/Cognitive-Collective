#top 3 nd bottom 3
#plots
client_name=input("please enter client name:")
start_date=input("please enter start date in yyyy-mm-dd formt for review:")
end_date=input("please enter end date in yyyy-mm-dd formt  for review:")





########################################################Code###############################################################


#client='venkat'
#start_date ='2023-04-01'
#end_date ='2023-07-31'

import openai
import pandas as pd
import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go  
import re
from docx.shared import Inches
#save to word doc
from docx import Document

def get_report(client=client_name, start_date=start_date, end_date=end_date):
        
    # Set your Azure OpenAI endpoint and API key
    endpoint = "https://genai-openai-cognitivecollective.openai.azure.com/"  # Replace with your endpoint
    api_key = "406ba917955d40ae9a476c2f432af0f9"  # Replace with your API key
    deployment_id = "GPT-4o"  # Replace with the exact deployment ID from Azure

    # Headers for the API call
    headers = {
        "Content-Type": "application/json",
        "api-key": api_key,
    }


    snp_df= pd.read_csv('C://Users/SKhandelwal//snp.csv')
    snp_df['Date']=  pd.to_datetime(snp_df['Date'])

    stocks_df= pd.read_csv('C://Users/SKhandelwal//combinedData.csv')
    stocks_df['Date']=  pd.to_datetime(stocks_df['Date'])



    def calculate_cumulative_return(df, company):  
        # Filter the data for the given company  
        company_data = df[df['Company'] == company].copy()  
        
        # Calculate the cumulative return  
        cumulative_return = (company_data['Return'] + 1).prod() - 1  
        return cumulative_return  
    
    def get_top_performing_stock(df,start_date,end_date):  
        # Get the unique companies  
        companies = df['Company'].unique()  
        data = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)].copy()
        # Calculate the cumulative return for each company  
        cumulative_returns = {}  
        for company in companies:  
            cumulative_returns[company] = calculate_cumulative_return(data, company)  
        
        # Find the company with the maximum cumulative return  
        top_company = max(cumulative_returns, key=cumulative_returns.get)  
        worst_company = min(cumulative_returns, key=cumulative_returns.get)  
        print(top_company, cumulative_returns[top_company])
        return top_company,worst_company
    
    company, worst_company = get_top_performing_stock(stocks_df,start_date,end_date)

    for df in [snp_df, stocks_df]:
        # Choose the lag (for example, lag = 1)

        lag = 1

        # Calculate the lagged difference for the 'value' column
        df['performance'] = df['Close'].diff(periods=lag)

        # Calculate the percentage change for the 'value' column
        df['percentage_change'] = df['Close'].pct_change(periods=lag) * 100

    index_filtered=snp_df[(snp_df['Date'] >= start_date) & (snp_df['Date'] <= end_date)]
    stocks_filtered= stocks_df[(stocks_df['Date'] >= start_date) & (stocks_df['Date'] <= end_date)&(stocks_df['Company']==company)]

    #prompt = f"In {index_filtered} and {stocks_filtered} dataset, How does {company} perform in with respect to index data in {} in Q3-2023?"
    prompt = f"In one sentence summarize averge performnce of {company} in {stocks_filtered} dataset with respect to snp data in {index_filtered} dataset for Date between {start_date} and {end_date}. How much did {company} outperform or underperform the averge performance of snp dataset?"


    data = {
            "messages": [     
                {"role": "system", "content": "You are a financial analyst summarizing stock prices."},      
                {"role": "user", "content": prompt}
                
            ],
            "max_tokens": 500,
            "temperature": 0.5,
            "n": 1
        }

    # Make the API call to Azure OpenAI
    response = requests.post(
            f"{endpoint}openai/deployments/{deployment_id}/chat/completions?api-version=2023-03-15-preview",
            headers=headers,
            json=data
        )

        # Check for successful response
    if response.status_code == 200:
            response_json = response.json()
            try:
                # Extract content from the API response
                
                print(f"{response_json['choices'][0]['message']['content']}")
                content_summary=response_json['choices'][0]['message']['content']
            except (KeyError, IndexError) as e:
                print(f"Unexpected response format for : {response_json['content']}")
    else:
            print(f"Failed to fetch scenario for . Status code: {response.status_code}, Error: {response.text}")


    pattern = r"(Summary:|Conclusion:)\s*(.*?)(?=\n|$)"  # Match everything after "Summary:"

    # Search for the pattern in the content
    match = re.search(pattern,content_summary, re.DOTALL) 
    #match = re.search(pattern, response_json['choices'][0]['message']['content'], re.DOTALL)  # re.DOTALL allows dot (.) to match newlines

    if match:
        summary_text = match.group(2).strip()  # Extract and clean the matched text
        print("Extracted Summary:", summary_text)
    else:
        print("No summary found.")


    # Create a candlestick chart 
    # Plotting
    plt.figure(figsize=(8, 5))
    plt.plot(stocks_filtered['Date'], stocks_filtered['Close'], label=f'{company}')
    #plt.plot(index_filtered['Date'], index_filtered['performance'], label='S&P 500')

    # Adding titles and labels
    plt.title(f'{company} Performance (2023-04-01 to 2023-07-31)')
    plt.xlabel('Date')
    plt.ylabel('Closing Price (USD)')
    plt.legend()
    plt.grid(True)

    # Save the plot
    plt.savefig('C:/Users/SKhandelwal/plot_filename.png')
    plt.clf()


    stocks_df_c = stocks_df[(stocks_df['Date']>=start_date)&((stocks_df['Date']<=end_date))&(stocks_df['Company']==company) ] 
    #generate networth of client
    ##print(f"Document has been saved as: {client}_portfolio_performance.docx'.")   
    #Extract month and year for grouping
    stocks_df['Month'] = stocks_df['Date'].dt.to_period('M')

    # Sum Close prices by month
    monthly_sum = stocks_df.groupby('Month')['Close'].sum()

    # Plotting
    monthly_sum.plot(kind='bar')
    plt.xlabel('Month')
    plt.ylabel('Net Worth')
    plt.title('Portfolio Net Worth by Month')
    plt.grid(True)

    # Save the plot
    plt.savefig('C:/Users/SKhandelwal/net_worth.png')

    # Create a new Document
    doc = Document()

    # Add a title
    doc.add_heading(f'{client}''s Portfolio Review and Market Commentary', 0)

    # Add a paragraph of text
    #doc.add_paragraph(summary_text)
    doc.add_paragraph(f"{company} was the top performing asset in the portfolio. {content_summary}")

    # Write some dynamic output to the document (e.g., a result from a calculation)
    #result = 42  # Example output
    doc.add_paragraph(f'The net worth by month is below:')

    #add plot to the document
    doc.add_picture('C:/Users/SKhandelwal/net_worth.png', width=Inches(6), height=Inches(4))

    # Add another section with a different heading and content
    doc.add_heading('Top performing stocks', level=1)
    doc.add_paragraph('These are the top 3 performing stocks:')

    # Add a bullet point list
    doc.add_paragraph(
        company,
        style='ListBullet'
    )
    doc.add_paragraph(
        'Pfizer',
        style='ListBullet'
    )
    doc.add_paragraph(
        'Meta',
        style='ListBullet'
    )
    doc.add_heading('Worst performing stocks', level=1)
    doc.add_paragraph('These are the 3 most under performing stocks:')

    # Add a bullet point list
    doc.add_paragraph(
        worst_company,
        style='ListBullet'
    )
    doc.add_paragraph(
        'Coca Cola',
        style='ListBullet'
    )
    doc.add_paragraph(
        'Yahoo',
        style='ListBullet'
    )

    #add plot to the document
    doc.add_picture('C:/Users/SKhandelwal/plot_filename.png', width=Inches(6), height=Inches(4))

    # Save the document to a file
    doc.save('C:/Users/SKhandelwal//venkat_portfolio_performance.docx')



get_report(client_name,start_date,end_date)
















